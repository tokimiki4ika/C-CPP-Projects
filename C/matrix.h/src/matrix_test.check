#include "matrix/secondary.h"

char err[] = "error";
matrix_t test1 = {0}, test2 = {0}, test3 = {0};

#test eq_matrix_test
create_matrix(5, 5, &test1);
create_matrix(5, 5, &test2);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[0][2] = 1.0;
test1.matrix[0][3] = 2.0;
test1.matrix[0][4] = 2.0;
test1.matrix[1][0] = 4.0;
test1.matrix[1][1] = 3.0;
test1.matrix[1][2] = 3.0;
test1.matrix[1][3] = 2.0;
test1.matrix[1][4] = 2.0;
test1.matrix[2][0] = 4.0;
test1.matrix[2][1] = 2.0;
test1.matrix[2][2] = 5.0;
test1.matrix[2][3] = 2.0;
test1.matrix[2][4] = 2.0;
test1.matrix[3][0] = 3.0;
test1.matrix[3][1] = 2.0;
test1.matrix[3][2] = 2.0;
test1.matrix[3][3] = 2.0;
test1.matrix[3][4] = 2.0;
test1.matrix[4][0] = 1.0;
test1.matrix[4][1] = 2.0;
test1.matrix[4][2] = 2.0;
test1.matrix[4][3] = 4.0;
test1.matrix[4][4] = 2.0;
cpy_matrix(&test1, &test2);
fail_unless(eq_matrix(&test1, &test2), err);
test1.matrix[4][4] = 3.0;
fail_unless(!eq_matrix(&test1, &test2), err);
remove_matrix(&test1);
remove_matrix(&test2);

#test sum_matrix_test
create_matrix(3, 3, &test1);
create_matrix(3, 3, &test2);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[0][2] = 1.0;
test1.matrix[1][0] = 4.0;
test1.matrix[1][1] = 3.0;
test1.matrix[1][2] = 3.0;
test1.matrix[2][0] = 4.0;
test1.matrix[2][1] = 2.0;
test1.matrix[2][2] = 5.0;
cpy_matrix(&test1, &test2);
create_matrix(3, 3, &test3);
fail_unless(!sum_matrix(&test1, &test2, &test3), err);
ck_assert_double_eq_tol(test3.matrix[0][0], 10.0, EPS_T);
ck_assert_double_eq_tol(test3.matrix[1][2], 6.0, EPS_T);
ck_assert_double_eq_tol(test3.matrix[2][1], 4.0, EPS_T);
remove_matrix(&test1);
remove_matrix(&test2);
remove_matrix(&test3);

#test sub_matrix_test
create_matrix(3, 3, &test1);
create_matrix(3, 3, &test2);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[0][2] = 1.0;
test1.matrix[1][0] = 4.0;
test1.matrix[1][1] = 3.0;
test1.matrix[1][2] = 3.0;
test1.matrix[2][0] = 4.0;
test1.matrix[2][1] = 2.0;
test1.matrix[2][2] = 5.0;
cpy_matrix(&test1, &test2);
create_matrix(3, 3, &test3);
fail_unless(!sub_matrix(&test1, &test2, &test3), err);
ck_assert_double_eq_tol(test3.matrix[0][0], 0.0, EPS_T);
ck_assert_double_eq_tol(test3.matrix[1][2], 0.0, EPS_T);
ck_assert_double_eq_tol(test3.matrix[2][1], 0.0, EPS_T);
remove_matrix(&test1);
remove_matrix(&test2);
remove_matrix(&test3);

#test mult_number_test
create_matrix(3, 3, &test1);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[0][2] = 1.0;
test1.matrix[1][0] = 4.0;
test1.matrix[1][1] = 3.0;
test1.matrix[1][2] = 3.0;
test1.matrix[2][0] = 4.0;
test1.matrix[2][1] = 2.0;
test1.matrix[2][2] = 5.0;
create_matrix(3, 3, &test3);
fail_unless(!mult_number(&test1, 5.0, &test3), err);
ck_assert_double_eq_tol(test3.matrix[0][0], 25.0, EPS_T);
ck_assert_double_eq_tol(test3.matrix[1][2], 15.0, EPS_T);
ck_assert_double_eq_tol(test3.matrix[2][1], 10.0, EPS_T);
remove_matrix(&test1);
remove_matrix(&test3);

#test mult_matrix_and_transpose_test
create_matrix(3, 2, &test1);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[1][0] = 4.0;
test1.matrix[1][1] = 3.0;
test1.matrix[2][0] = 4.0;
test1.matrix[2][1] = 2.0;
fail_unless(!transpose(&test1, &test2), err);
fail_unless(!mult_matrix(&test1, &test2, &test3), err);
ck_assert_double_eq_tol(test3.matrix[0][0], 26.0, EPS_T);
ck_assert_double_eq_tol(test3.matrix[1][1], 25.0, EPS_T);
ck_assert_double_eq_tol(test3.matrix[2][2], 20.0, EPS_T);
remove_matrix(&test1);
remove_matrix(&test2);
remove_matrix(&test3);

#test determinant_and_transpose_test
create_matrix(5, 5, &test1);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[0][2] = 1.0;
test1.matrix[0][3] = 2.0;
test1.matrix[0][4] = 2.0;
test1.matrix[1][0] = 4.0;
test1.matrix[1][1] = 3.0;
test1.matrix[1][2] = 3.0;
test1.matrix[1][3] = 2.0;
test1.matrix[1][4] = 2.0;
test1.matrix[2][0] = 4.0;
test1.matrix[2][1] = 2.0;
test1.matrix[2][2] = 5.0;
test1.matrix[2][3] = 2.0;
test1.matrix[2][4] = 2.0;
test1.matrix[3][0] = 3.0;
test1.matrix[3][1] = 2.0;
test1.matrix[3][2] = 2.0;
test1.matrix[3][3] = 2.0;
test1.matrix[3][4] = 2.0;
test1.matrix[4][0] = 1.0;
test1.matrix[4][1] = 2.0;
test1.matrix[4][2] = 2.0;
test1.matrix[4][3] = 4.0;
test1.matrix[4][4] = 2.0;
fail_unless(!transpose(&test1, &test2), err);
double a = 0.0, b = 0.0;
fail_unless(!determinant(&test1, &a), err);
fail_unless(!determinant(&test2, &b), err);
ck_assert_double_eq_tol(a, -36.0, EPS_T);
ck_assert_double_eq_tol(b, -36.0, EPS_T);
remove_matrix(&test1);
remove_matrix(&test2);
create_matrix(3, 3, &test1);
test1.matrix[0][0] = 1.0;
test1.matrix[0][1] = 1.0;
test1.matrix[0][2] = 2.0;
test1.matrix[1][0] = 3.0;
test1.matrix[1][1] = 3.0;
test1.matrix[1][2] = 2.0;
test1.matrix[2][0] = 2.0;
test1.matrix[2][1] = 5.0;
test1.matrix[2][2] = 2.0;
fail_unless(!determinant(&test1, &a), err);
ck_assert_double_eq_tol(a, 12.0, EPS_T);
remove_matrix(&test1);

#test calc_complements_test
create_matrix(4, 4, &test1);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[0][2] = 1.0;
test1.matrix[0][3] = 2.0;
test1.matrix[1][0] = 4.0;
test1.matrix[1][1] = 3.0;
test1.matrix[1][2] = 3.0;
test1.matrix[1][3] = 2.0;
test1.matrix[2][0] = 4.0;
test1.matrix[2][1] = 2.0;
test1.matrix[2][2] = 5.0;
test1.matrix[2][3] = 2.0;
test1.matrix[3][0] = 2.0;
test1.matrix[3][1] = 2.0;
test1.matrix[3][2] = 2.0;
test1.matrix[3][3] = 2.0;
fail_unless(!calc_complements(&test1, &test2), err);
ck_assert_double_eq_tol(test2.matrix[3][0], -12.0, EPS_T);
ck_assert_double_eq_tol(test2.matrix[0][0], 6.0, EPS_T);
ck_assert_double_eq_tol(test2.matrix[0][1], -8.0, EPS_T);
ck_assert_double_eq_tol(test2.matrix[1][2], -4.0, EPS_T);
remove_matrix(&test1);
remove_matrix(&test2);

#test inverse_matrix_test
create_matrix(4, 4, &test1);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[0][2] = 1.0;
test1.matrix[0][3] = 2.0;
test1.matrix[1][0] = 4.0;
test1.matrix[1][1] = 3.0;
test1.matrix[1][2] = 3.0;
test1.matrix[1][3] = 2.0;
test1.matrix[2][0] = 4.0;
test1.matrix[2][1] = 2.0;
test1.matrix[2][2] = 5.0;
test1.matrix[2][3] = 2.0;
test1.matrix[3][0] = 2.0;
test1.matrix[3][1] = 2.0;
test1.matrix[3][2] = 2.0;
test1.matrix[3][3] = 2.0;
fail_unless(!inverse_matrix(&test1, &test2), err);
ck_assert_double_eq_tol(test2.matrix[3][0], 0.2, EPS_T);
ck_assert_double_eq_tol(test2.matrix[0][0], 0.2, EPS_T);
ck_assert_double_eq_tol(test2.matrix[0][1], 0.2, EPS_T);
ck_assert_double_eq_tol(test2.matrix[1][2], -0.3333333, EPS_T);
remove_matrix(&test1);
remove_matrix(&test2);

#test matrix_error_test
double *a = NULL;
fail_unless(sum_matrix(&test1, &test2, &test3), err);
fail_unless(sub_matrix(&test1, &test2, &test3), err);
fail_unless(mult_number(&test1, 2.0, &test3), err);
fail_unless(mult_matrix(&test1, &test2, &test3), err);
fail_unless(transpose(&test1, &test2), err);
fail_unless(determinant(&test1, a), err);
fail_unless(calc_complements(&test1, &test2), err);
fail_unless(inverse_matrix(&test1, &test2), err);
create_matrix(2, 2, &test1);
create_matrix(1, 1, &test2);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
test1.matrix[1][0] = 5.0;
test1.matrix[1][1] = 1.0;
test2.matrix[0][0] = 25.0;
double b = 2;
fail_unless(sum_matrix(&test1, &test2, &test3), err);
fail_unless(sub_matrix(&test1, &test2, &test3), err);
fail_unless(mult_matrix(&test1, &test2, &test3), err);
remove_matrix(&test2);
remove_matrix(&test1);
create_matrix(2, 1, &test1);
test1.matrix[0][0] = 5.0;
test1.matrix[0][1] = 1.0;
fail_unless(determinant(&test1, &b), err);
fail_unless(calc_complements(&test1, &test2), err);
fail_unless(inverse_matrix(&test1, &test2), err);
remove_matrix(&test1);
